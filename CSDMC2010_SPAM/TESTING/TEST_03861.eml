X-Account-Key: account5
X-UIDL: GmailId128480064ecead47
X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                 
Delivered-To: mlsubscriber.tech@csmining.org
Received: by 10.143.34.8 with SMTP id m8cs2186wfj;
        Wed, 28 Apr 2010 22:18:25 -0700 (PDT)
Received: by 10.143.169.5 with SMTP id w5mr4792818wfo.222.1272518305122;
        Wed, 28 Apr 2010 22:18:25 -0700 (PDT)
Return-Path: <bluetooth-dev-bounces+mlsubscriber.tech=csmining.org@lists.apple.com>
Received: from bz1.apple.com (bz1.apple.com [17.254.13.36])
        by mx.google.com with ESMTP id 3si647087pzk.61.2010.04.28.22.18.24;
        Wed, 28 Apr 2010 22:18:25 -0700 (PDT)
Received-SPF: pass (google.com: manual fallback record for domain of bluetooth-dev-bounces+mlsubscriber.tech=csmining.org@lists.apple.com designates 17.254.13.36 as permitted sender) client-ip=17.254.13.36;
Authentication-Results: mx.google.com; spf=pass (google.com: manual fallback record for domain of bluetooth-dev-bounces+mlsubscriber.tech=csmining.org@lists.apple.com designates 17.254.13.36 as permitted sender) smtp.mail=bluetooth-dev-bounces+mlsubscriber.tech=csmining.org@lists.apple.com
Received: from lists.apple.com (unknown [17.128.113.151])
	by bz1.apple.com (Postfix) with ESMTP id CB0391BD76FCD
	for <mlsubscriber.tech@csmining.org>; Wed, 28 Apr 2010 22:18:24 -0700 (PDT)
Received: from master.lists.apple.com (localhost [127.0.0.1])
	by lists.apple.com (Postfix) with ESMTP id C5ABC273AB08B
	for <mlsubscriber.tech@csmining.org>; Wed, 28 Apr 2010 22:18:24 -0700 (PDT)
X-Original-To: bluetooth-dev@lists.apple.com
Delivered-To: bluetooth-dev@lists.apple.com
Received: from relay1.apple.com (relay1.apple.com [17.128.113.31])
	by lists.apple.com (Postfix) with ESMTP id 25C6B273AB057
	for <bluetooth-dev@lists.apple.com>;
	Wed, 28 Apr 2010 22:18:22 -0700 (PDT)
Received: from mail-in11.apple.com (mail-in.apple.com [17.254.13.7])
	by relay1.apple.com (Postfix) with ESMTP id 15305D715686
	for <bluetooth-dev@lists.apple.com>;
	Wed, 28 Apr 2010 22:18:21 -0700 (PDT)
X-AuditID: 11fe0d07-b7c36ae000006674-2e-4bd9169b8b0c
Authentication-Results: mail-in11.apple.com x-tls.subject="/CN=gws01";
	auth=fail (cipher=AES128-SHA)
Received: from gwse.ethz.ch (gwse.ethz.ch [129.132.178.238])
	(using TLS with cipher AES128-SHA (AES128-SHA/128 bits))
	(Client CN "gws01", Issuer "ETH Zurich D.ETHZ.CH" (not verified))
	by mail-in11.apple.com (Apple Secure Mail Relay) with SMTP id
	D5.DD.26228.C9619DB4; Wed, 28 Apr 2010 22:18:21 -0700 (PDT)
Received: from CAS02.d.ethz.ch (129.132.178.236) by gws01.d.ethz.ch
	(129.132.178.238) with Microsoft SMTP Server (TLS) id 8.2.254.0;
	Thu, 29 Apr 2010 07:18:19 +0200
Received: from [192.168.3.103] (77.58.155.199) by mail.ethz.ch
	(129.132.178.227) with Microsoft SMTP Server (TLS) id 8.2.254.0;
	Thu, 29 Apr 2010 07:18:06 +0200
References: <20100428190117.B45122736C0B8@lists.apple.com>
	<9D76C1FE-A565-4811-BE60-FF1F07FC147A@mac.com>
In-Reply-To: <9D76C1FE-A565-4811-BE60-FF1F07FC147A@mac.com>
MIME-Version: 1.0 (Apple Message framework v1078)
Message-ID: <AFE102B5-BB9D-4B62-824C-893BE11D483E@inf.ethz.ch>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
From: Matthias Ringwald <mringwal@inf.ethz.ch>
Date: Thu, 29 Apr 2010 07:18:05 +0200
To: David Giovannini <dsjove@mac.com>
X-Mailer: Apple Mail (2.1078)
X-Brightmail-Tracker: AAAAARPwkeI=
Cc: bluetooth-dev@lists.apple.com
Subject: Re: Bluetooth-dev Digest, Vol 7, Issue 13
X-BeenThere: bluetooth-dev@lists.apple.com
X-Mailman-Version: 2.1.5
Precedence: list
List-Id: "Mailing list for Bluetooth developer discussion."
	<bluetooth-dev.lists.apple.com>
List-Unsubscribe: <http://lists.apple.com/mailman/listinfo/bluetooth-dev>,
	<mailto:bluetooth-dev-request@lists.apple.com?subject=unsubscribe>
List-Post: <mailto:bluetooth-dev@lists.apple.com>
List-Help: <mailto:bluetooth-dev-request@lists.apple.com?subject=help>
List-Subscribe: <http://lists.apple.com/mailman/listinfo/bluetooth-dev>,
	<mailto:bluetooth-dev-request@lists.apple.com?subject=subscribe>
Sender: bluetooth-dev-bounces+mlsubscriber.tech=csmining.org@lists.apple.com
Errors-To: bluetooth-dev-bounces+mlsubscriber.tech=csmining.org@lists.apple.com

Hi David

I don't really understand your current application needs, but I also =
don't understand why it should not be possible to model all your =
Bluetooth communication needs by a state machine running on the main =
thread. You can always provide a synchronous interface to to other parts =
of your app in a single thread. Also, the main thread should not block, =
so using asynchronous calls on it is the right way to go.

In BTnut, the first Bluetooth stack I was involved, we used separate =
threads for different Bluetooth layers and protocols, but in the end, =
the required thread synchronization was just creating unnecessary =
problems. In my new Bluetooth stack called BTstack (btstack.org), the =
Bluetooth daemon runs in a single thread which can handle any number of =
clients. So far this seems to be the right choice, both for portability =
and for implementation ease.

Communication in general and especially Bluetooth is inherently =
asynchronous by nature, and trying to force that into a general =
synchronous interface does cause more harm than it solves. In your =
application, you can do that cleanly but not on an intermediate layer.


Other question: Did anybody see the Apple Bluetooth example code? I =
cannot find any locally or on the developer site

Best
 Matthias Ringwald

On 29.04.2010, at 03:40, David Giovannini wrote:

> Hello,
>=20
> Thank you everybody for your input so far. Digging into this code has =
given me a chance to clean up some ugliness :-) But I keep hitting =
roadblocks where I really need to interact with the hardware in a nice =
procedural way. The synchronous behavior of bluetooth requires =
two-thread synchronization to achieve this. That code works great =
assuming I have a dedicated bluetooth thread!
>=20
> Apple stating that two core services, UI and Bluetooth, should exist =
in and share the runloop in main is terrible.
>=20
> I am reluctant to offload BT communications to an auxiliary process =
because of the non-modal user interactions with the =
IOBluetoothDeviceInquiry, IOBluetoothDevice, and =
IOBluetoothRFCOMMChannel.=20
>=20
> If anybody knows of sample code out there for creating an aux process =
that can manage those objects and expose the functions over some kind of =
IAC, I would love to see it.
>=20
> And not knowing the internals of the bluetooth framework, I am =
thinking there has to be a thread-safe way to install and manage the =
bluetooth runloop input mechanism in a non-main thread. If anybody has =
any hints on that, that would be the simplest solution.
>=20
> Cheers,
> Dave
>=20
>=20
> On Apr 28, 2010, at 2:01 PM, bluetooth-dev-request@lists.apple.com =
wrote:
>=20
>> Send Bluetooth-dev mailing list submissions to
>> 	bluetooth-dev@lists.apple.com
>>=20
>> To subscribe or unsubscribe via the World Wide Web, visit
>> 	http://lists.apple.com/mailman/listinfo/bluetooth-dev
>> or, via email, send a message with subject or body 'help' to
>> 	bluetooth-dev-request@lists.apple.com
>>=20
>> You can reach the person managing the list at
>> 	bluetooth-dev-owner@lists.apple.com
>>=20
>> When replying, please edit your Subject line so it is more specific
>> than "Re: Contents of Bluetooth-dev digest..."
>>=20
>>=20
>> Today's Topics:
>>=20
>>  1. Re: Bluetooth and runloops in a dedicated thread.
>>     (David Giovannini)
>>  2. Re: Bluetooth and runloops in a dedicated thread. (Dave Keck)
>>  3. Re: Bluetooth and runloops in a dedicated thread. (Zach Rosen)
>>  4. Re: Bluetooth and runloops in a dedicated thread.
>>     (David Giovannini)
>>  5. Re: Bluetooth and runloops in a dedicated thread. (Peter Sichel)
>>=20
>>=20
>> =
----------------------------------------------------------------------
>>=20
>> Message: 1
>> Date: Tue, 27 Apr 2010 23:11:33 -0500
>> From: David Giovannini <dsjove@mac.com>
>> Subject: Re: Bluetooth and runloops in a dedicated thread.
>> To: Dave Keck <davekeck@csmining.org>
>> Cc: bluetooth-dev@lists.apple.com
>> Message-ID: <3DABC44C-9128-4F71-80F2-63D24F4E53EC@mac.com>
>> Content-Type: text/plain; charset=3Dus-ascii
>>=20
>> Hello,
>>=20
>> I knocked all the code down to the single UI thread and I =
rediscovered why I need multiple threads. My Obj-C objects give KVC =
semantics to the bluetooth device. A getter is waiting on a thread =
signal for the arrival of requested data. The requested data will never =
arrive since the single thread is in a blocked state. I also now have to =
turn the bluetooth scanner off to open a connection to a discovered =
device!
>>=20
>> I don't see how to do the bluetooth communications in another process =
be non-trivial. Is there a simple approach to that?
>>=20
>> My next factoring will be to but the UI thread into a secondary =
thread, and let bluetooth own the main. Hopefully that will work.
>>=20
>> Dave
>>=20
>>=20
>> On Apr 27, 2010, at 2:41 AM, Dave Keck wrote:
>>=20
>>>> I can easily share a single thread between all bluetooth devices. =
That will solve any multi-threading issues in the bluetooth services. =
Bluetooth installs itself as an NSRunLoop source, somehow. =
IOBluetoothValidateHardware used to do that, and the NSRunLoop had kept =
on running.
>>>=20
>>> I recommend against using the Bluetooth APIs anywhere but the main
>>> thread. There's been some past discussion on this list regarding
>>> thread-safety and IOBluetooth, and it seems the Apple guys suggest
>>> confining Bluetooth calls to the main thread, too. See:
>>>=20
>>>  =
http://lists.apple.com/archives/bluetooth-dev/2007/Sep/msg00003.html
>>>  =
http://lists.apple.com/archives/bluetooth-dev/2009/Sep/msg00003.html
>>>=20
>>> With that said, much of the IOBluetooth APIs are asynchronous,
>>> allowing you to specify a delegate to be notified when a particular
>>> operation is complete. Are you sure you need the Bluetooth calls to
>>> exist in their own thread? If so, spawn a helper process and put the
>>> Bluetooth calls there. This is what I do in my own projects - it =
works
>>> fine.
>>>=20
>>>> I cannot have the BlueTooth library pick a runloop at random. =
Depending on configuration, this application may have a UI and/or may =
have a web-service. Bluetooth communications needs to be sandboxed into =
a designated RunLoop.
>>>=20
>>> I'm not sure how a UI/web service/Bluetooth combination makes it
>>> necessary that the Bluetooth calls exist in their own thread; as
>>> mentioned, many of the Bluetooth APIs are non-blocking. If I were
>>> writing this sort of combination program, I would either:
>>>=20
>>>  1. put the UI/Bluetooth stuff in the main thread, and the web
>>> service stuff in a separate thread, or
>>>  2. put the UI stuff in the main thread, Bluetooth stuff in a
>>> separate helper process, and the web service stuff in a separate
>>> thread.
>>>=20
>>>> How do I tell the Bluetooth library to install itself as a source =
on a specific runloop of a specific thread? If I need to start that =
thread in main, I'll do it!
>>>=20
>>> Based on the links above, "make sure you do ALL Bluetooth related
>>> activities on the first thread from which you call anything in the
>>> Bluetooth stack." I think Jason would agree though, that that advice
>>> is error-prone and should only be considered a last resort. That
>>> advice was also given 2.5 years ago.
>>=20
>>=20
>>=20
>> ------------------------------
>>=20
>> Message: 2
>> Date: Tue, 27 Apr 2010 18:53:08 -1000
>> From: Dave Keck <davekeck@csmining.org>
>> Subject: Re: Bluetooth and runloops in a dedicated thread.
>> To: David Giovannini <dsjove@mac.com>
>> Cc: bluetooth-dev@lists.apple.com
>> Message-ID:
>> 	<n2h360bd19f1004272153w780a6186x7b90d4e66e0ec4be@mail.csmining.org>
>> Content-Type: text/plain; charset=3DISO-8859-1
>>=20
>>> I knocked all the code down to the single UI thread and I =
rediscovered why I need multiple threads. My Obj-C objects give KVC =
semantics to the bluetooth device. A getter is waiting on a thread =
signal for the arrival of requested data. The requested data will never =
arrive since the single thread is in a blocked state. I also now have to =
turn the bluetooth scanner off to open a connection to a discovered =
device!
>>=20
>> I see. Note that if your getter method blocks until the Bluetooth
>> operation is complete, your UI will also be blocked. So if the
>> Bluetooth operation takes too long, you'll get the beachball.
>>=20
>> Perhaps your getter could initiate the Bluetooth operation, and in =
the
>> meantime return a cached object? If a cached object isn't available =
or
>> you want to update the property's value, return a default value for
>> the property, and initiate a "Loading..." spinner in the UI. Once the
>> current state of the property is available, it updates the property
>> which in turn updates the UI, and hides the loading spinner. For a
>> snappy user experience, I'd try to avoid blocking in a getter method.
>>=20
>>> I don't see how to do the bluetooth communications in another =
process be non-trivial. Is there a simple approach to that?
>>=20
>> I implemented a simple custom protocol over Unix pipes, allowing the
>> parent to direct the child in performing some simple Bluetooth
>> operations. It certainly wasn't fun to implement, but from what =
you've
>> said so far, I think handling the Bluetooth operations in the same
>> process will work fine in your case if you structure it right.
>>=20
>>> My next factoring will be to but the UI thread into a secondary =
thread, and let bluetooth own the main. Hopefully that will work.
>>=20
>> I hate the be the bearer of bad news, but UI code generally needs to
>> remain on the main thread, too. See:
>>=20
>>   =
http://developer.apple.com/mac/library/documentation/cocoa/Conceptual/Mult=
ithreading/ThreadSafetySummary/ThreadSafetySummary.html
>>=20
>>=20
>> ------------------------------
>>=20
>> Message: 3
>> Date: Tue, 27 Apr 2010 22:42:53 -0700
>> From: Zach Rosen <zrosen@mirasoftware.com>
>> Subject: Re: Bluetooth and runloops in a dedicated thread.
>> To: bluetooth-dev@lists.apple.com
>> Message-ID: <4EA351E2-1C29-4855-BBE1-5B2B9F9BAFD7@mirasoftware.com>
>> Content-Type: text/plain; charset=3Dus-ascii
>>=20
>>>>=20
>>>> I don't see how to do the bluetooth communications in another =
process be non-trivial. Is there a simple approach to that?
>>>=20
>>> I implemented a simple custom protocol over Unix pipes, allowing the
>>> parent to direct the child in performing some simple Bluetooth
>>> operations. It certainly wasn't fun to implement, but from what =
you've
>>> said so far, I think handling the Bluetooth operations in the same
>>> process will work fine in your case if you structure it right.
>>=20
>> Instead of pipes, you could use an NSDistributedObject to communicate =
with your Bluetooth process.
>> In fact, I think this may be how the Bluetooth framework communicates =
with "blued".
>>=20
>>=20
>>=20
>>=20
>> ------------------------------
>>=20
>> Message: 4
>> Date: Wed, 28 Apr 2010 07:28:09 -0500
>> From: David Giovannini <dsjove@mac.com>
>> Subject: Re: Bluetooth and runloops in a dedicated thread.
>> To: Dave Keck <davekeck@csmining.org>
>> Cc: bluetooth-dev@lists.apple.com
>> Message-ID: <77C8095D-FE94-4075-BAA9-0842674FE98E@mac.com>
>> Content-Type: text/plain; charset=3Dus-ascii
>>=20
>>=20
>> On Apr 27, 2010, at 11:53 PM, Dave Keck wrote:
>>=20
>>>> I knocked all the code down to the single UI thread and I =
rediscovered why I need multiple threads. My Obj-C objects give KVC =
semantics to the bluetooth device. A getter is waiting on a thread =
signal for the arrival of requested data. The requested data will never =
arrive since the single thread is in a blocked state. I also now have to =
turn the bluetooth scanner off to open a connection to a discovered =
device!
>>>=20
>>> I see. Note that if your getter method blocks until the Bluetooth
>>> operation is complete, your UI will also be blocked. So if the
>>> Bluetooth operation takes too long, you'll get the beachball.
>>=20
>> The beach always happens because the thread to receive the bluetooth =
data can never receive the data under the single thread model. That is =
why I went multi-thread.
>>=20
>>>=20
>>> Perhaps your getter could initiate the Bluetooth operation, and in =
the
>>> meantime return a cached object? If a cached object isn't available =
or
>>> you want to update the property's value, return a default value for
>>> the property, and initiate a "Loading..." spinner in the UI. Once =
the
>>> current state of the property is available, it updates the property
>>> which in turn updates the UI, and hides the loading spinner. For a
>>> snappy user experience, I'd try to avoid blocking in a getter =
method.
>>=20
>> I cannot block at all. But sending a redundant KVC property broadcast =
on incoming data may work. I already have logic to not broadcast the =
change if there really was none.
>>=20
>> So then all calls become synchronous. A property setter or getter =
becomes a request (cached value is returned in the current stack) and =
the real property change happens sometime in the future.
>>=20
>>>=20
>>>> I don't see how to do the bluetooth communications in another =
process be non-trivial. Is there a simple approach to that?
>>>=20
>>> I implemented a simple custom protocol over Unix pipes, allowing the
>>> parent to direct the child in performing some simple Bluetooth
>>> operations. It certainly wasn't fun to implement, but from what =
you've
>>> said so far, I think handling the Bluetooth operations in the same
>>> process will work fine in your case if you structure it right.
>>=20
>> Reading Apple's docs you linked pretty much says, "all our services =
only work in the main thread." That is a bit of a let down. The change =
in structure will be how you suggested - real results are not returned =
in the same call call stack.
>>=20
>> There doesn't seem to be a way for the bluetooth scan and a bluetooth =
connection to work simultaneously. That is not a big deal, just forces =
the user into more of a modal workflow.
>>=20
>>>=20
>>>> My next factoring will be to but the UI thread into a secondary =
thread, and let bluetooth own the main. Hopefully that will work.
>>>=20
>>> I hate the be the bearer of bad news, but UI code generally needs to
>>> remain on the main thread, too. See:
>>>=20
>>>  =
http://developer.apple.com/mac/library/documentation/cocoa/Conceptual/Mult=
ithreading/ThreadSafetySummary/ThreadSafetySummary.html
>>=20
>> Time to restructure the response mechanism...
>>=20
>> Thank you,
>> Dave
>>=20
>>=20
>>=20
>> ------------------------------
>>=20
>> Message: 5
>> Date: Wed, 28 Apr 2010 08:49:58 -0400
>> From: Peter Sichel <psichel@sustworks.com>
>> Subject: Re: Bluetooth and runloops in a dedicated thread.
>> To: bluetooth-dev@lists.apple.com
>> Message-ID: <AF063AE9-7AAE-4619-B260-09B8B55A24E2@sustworks.com>
>> Content-Type: text/plain; charset=3Dus-ascii
>>=20
>> On Apr 28, 2010, at 12:11 AM, David Giovannini wrote:
>>=20
>>> I knocked all the code down to the single UI thread and I =
rediscovered why I need multiple threads. My Obj-C objects give KVC =
semantics to the bluetooth device.
>>=20
>> Is this absolutely necessary? =20
>>=20
>>> A getter is waiting on a thread signal for the arrival of requested =
data.=20
>>=20
>> The Cocoa Bluetooth API was designed to be asynchronous after years =
of experience and problems with using synchronous APIs for networking.  =
Trying to translate it back into a synchronous multi-threaded API might =
be counter productive.
>>=20
>> If you really need a synchronous API, the previous Bluetooth APIs =
might still be available.
>>=20
>> - Peter
>>=20
>>=20
>>=20
>> ------------------------------
>>=20
>> _______________________________________________
>> Bluetooth-dev mailing list
>> Bluetooth-dev@lists.apple.com
>> http://lists.apple.com/mailman/listinfo/bluetooth-dev
>>=20
>> End of Bluetooth-dev Digest, Vol 7, Issue 13
>> ********************************************
>=20
> _______________________________________________
> Do not post admin requests to the list. They will be ignored.
> Bluetooth-dev mailing list      (Bluetooth-dev@lists.apple.com)
> Help/Unsubscribe/Update your Subscription:
> =
http://lists.apple.com/mailman/options/bluetooth-dev/mringwal%40inf.ethz.c=
h
>=20
> This email sent to mringwal@inf.ethz.ch

 _______________________________________________
Do not post admin requests to the list. They will be ignored.
Bluetooth-dev mailing list      (Bluetooth-dev@lists.apple.com)
Help/Unsubscribe/Update your Subscription:
http://lists.apple.com/mailman/options/bluetooth-dev/mlsubscriber.tech%40csmining.org

This email sent to mlsubscriber.tech@csmining.org

