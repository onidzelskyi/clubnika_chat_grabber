X-Account-Key: account5
X-UIDL: GmailId1281dec2d43bfa0e
X-Mozilla-Status: 0000
X-Mozilla-Status2: 00000000
X-Mozilla-Keys:                                                                                 
Delivered-To: mlsubscriber.tech@csmining.org
Received: by 10.143.34.8 with SMTP id m8cs91913wfj;
        Tue, 20 Apr 2010 18:12:35 -0700 (PDT)
Received: by 10.223.30.10 with SMTP id s10mr1219430fac.4.1271812336852;
        Tue, 20 Apr 2010 18:12:16 -0700 (PDT)
Return-Path: <bounce-debian-user=mlsubscriber.tech=csmining.org@lists.debian.org>
Received: from liszt.debian.org (liszt.debian.org [82.195.75.100])
        by mx.google.com with ESMTP id 1si89197fkt.41.2010.04.20.18.12.16;
        Tue, 20 Apr 2010 18:12:16 -0700 (PDT)
Received-SPF: pass (google.com: manual fallback record for domain of bounce-debian-user=mlsubscriber.tech=csmining.org@lists.debian.org designates 82.195.75.100 as permitted sender) client-ip=82.195.75.100;
Authentication-Results: mx.google.com; spf=pass (google.com: manual fallback record for domain of bounce-debian-user=mlsubscriber.tech=csmining.org@lists.debian.org designates 82.195.75.100 as permitted sender) smtp.mail=bounce-debian-user=mlsubscriber.tech=csmining.org@lists.debian.org
Received: from localhost (localhost [127.0.0.1])
	by liszt.debian.org (Postfix) with QMQP
	id 4388F13A4C2F; Wed, 21 Apr 2010 01:12:11 +0000 (UTC)
Old-Return-Path: <ejb@ql.org>
XChecker-Version: SpamAssassin 3.2.5 (2008-06-10) on liszt.debian.org
XLevel: 
XStatus: No, score=-7.9 required=4.0 tests=FOURLA,LDOSUBSCRIBER,
	LDO_WHITELIST,LOAN,MURPHY_FINANCE5,PLING_QUERY,SARE_LOANOFF autolearn=failed
	version=3.2.5
X-Original-To: lists-debian-user@liszt.debian.org
Delivered-To: lists-debian-user@liszt.debian.org
Received: from localhost (localhost [127.0.0.1])
	by liszt.debian.org (Postfix) with ESMTP id 32A6D13A4632
	for <lists-debian-user@liszt.debian.org>; Wed, 21 Apr 2010 01:12:05 +0000 (UTC)
X-Virus-Scanned: at lists.debian.org with policy bank en-ht
X-AmavisStatus: No, score=-2.799 tagged_above=-10000 required=5.3
	tests=[BAYES_00=-2, FOURLA=0.1, LDO_WHITELIST=-5, LOAN=2,
	MURPHY_FINANCE5=0.1, PLING_QUERY=1.39, SARE_LOANOFF=0.611]
	autolearn=no
Received: from liszt.debian.org ([127.0.0.1])
	by localhost (lists.debian.org [127.0.0.1]) (amavisd-new, port 2525)
	with ESMTP id yPMGjF17UmxK for <lists-debian-user@liszt.debian.org>;
	Wed, 21 Apr 2010 01:11:57 +0000 (UTC)
Received: from hgblob.mail.tigertech.net (hgblob.mail.tigertech.net [64.62.209.71])
	by liszt.debian.org (Postfix) with ESMTP id 7B1DB13A4BB8
	for <debian-user@lists.debian.org>; Wed, 21 Apr 2010 01:11:57 +0000 (UTC)
Received: from localhost (localhost [127.0.0.1])
	by hgblob.tigertech.net (Postfix) with ESMTP id 53D353235875;
	Tue, 20 Apr 2010 18:11:54 -0700 (PDT)
X-Virus-Scanned: Debian amavisd-new at hgblob.tigertech.net
Received: from glerbl (ip68-98-183-236.dc.dc.cox.net [68.98.183.236])
	(using TLSv1 with cipher AES256-SHA (256/256 bits))
	(No client certificate requested)
	by hgblob.tigertech.net (Postfix) with ESMTPSA id 24FE932283A9;
	Tue, 20 Apr 2010 18:11:54 -0700 (PDT)
Received: from soup ([10.160.59.17])
	by glerbl with esmtp (Exim 4.69)
	(envelope-from <ejb@ql.org>)
	id 1O4OTp-0004Ju-18; Tue, 20 Apr 2010 21:11:53 -0400
Received: from ejb by soup with local (Exim 4.71)
	(envelope-from <ejb@q.qbilt.org>)
	id 1O4OTo-0001Ga-Uh; Tue, 20 Apr 2010 21:11:52 -0400
From: Jay Berkenbilt <qjb@debian.org>
To: Luca.Merciadri@student.ulg.ac.be
Cc: debian-user@lists.debian.org
Subject: Re: PDF is blocked for printing, etc. OK for acroread (it behaves as expected), but KPDF allows me to print it, even if it is protected! Why?
References: <4BCC5B32.5030300@student.ulg.ac.be>
	<20100419144409.e99ce9d8.codehelp@debian.org>
	<4BCC5FB0.7060106@student.ulg.ac.be>
	<4BCC613C.6090107@lorentz.leidenuniv.nl>
	<4BCC77A3.9080803@student.ulg.ac.be>
	<20100419204257.0890259570.qww314159@soup>
	<4BCD9A58.90007@student.ulg.ac.be>
Message-ID: <20100420211152.0270994370.qww314159@soup>
Date: Tue, 20 Apr 2010 21:11:52 -0400
In-Reply-To: <4BCD9A58.90007@student.ulg.ac.be> (Merciadri Luca's message of
	"Tue, 20 Apr 2010 14:13:12 +0200")
User-Agent: Gnus/5.13 (Gnus v5.13) Emacs/23.1 (gnu/linux)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-SA-Exim-Connect-IP: <locally generated>
X-SA-Exim-Mail-From: ejb@q.qbilt.org
X-SA-Exim-Scanned: No (on soup); SAEximRunCond expanded to false
X-Rc-Virus: 2007-09-13_01
X-Rc-Spam: 2008-11-04_01
Resent-Message-ID: <sTIhj4JKhBI.A.SyF.rDlzLB@liszt>
Resent-From: debian-user@lists.debian.org
X-Mailing-List: <debian-user@lists.debian.org> archive/latest/574618
X-Loop: debian-user@lists.debian.org
List-Id: <debian-user.lists.debian.org>
List-Post: <mailto:debian-user@lists.debian.org>
List-Help: <mailto:debian-user-request@lists.debian.org?subject=help>
List-Subscribe: <mailto:debian-user-request@lists.debian.org?subject=subscribe>
List-Unsubscribe: <mailto:debian-user-request@lists.debian.org?subject=unsubscribe>
Precedence: list
Resent-Sender: debian-user-request@lists.debian.org
Resent-Date: Wed, 21 Apr 2010 01:12:11 +0000 (UTC)

Merciadri Luca <Luca.Merciadri@student.ulg.ac.be> wrote:

> Jay Berkenbilt wrote:
>> Merciadri Luca <Luca.Merciadri@student.ulg.ac.be> wrote:
>>
>>
>>
>> The PDF specification itself recommends using external encryption in
>> this case.  From section 7.6.1 of the PDF specification:
>>
>>   NOTE: Conforming writers have two choices if the encryption methods
>>   and syntax provided by PDF are not sufficient for their needs: they
>>   can provide an alternate security handler or they can encrypt whole
>>   PDF documents themselves, not making use of PDF security.
>>
>> It is very easy to defeat PDF security in any file that has a blank user
>> password since it is just up to the application to enforce security.
>>
> Yes, but if you ask for some non-void password, you need to send the
> password by some way to the receivers. Once they have the password, they
> can do pretty much they want. So, why would you use a password?

You might use a password if you wanted to provide complete access for
some people and no access for others.  For someone who has the password,
there is no real protection.  I sent some financial documents to a loan
officer once as a password-protected PDF.  I emailed him the PDF and
then left the password on his voicemail.  For my purposes, that was
sufficient security, and it didn't require any fancy technology or
software on his end.

>> I've written a detailed explanation of this which I can dig up and send
>> you if you're interested.
>>
> Sure. I am very interested in it.

Here it is.  I wrote this in response to a question from a user of my
PDF software, qpdf, which is in debian, but other than a quick mention
of a few specific tools, the response is not related to any particular
PDF application.

----

The PDF specification allows authors of PDF files to place various
restrictions on what you can do with them.  These include restricting
printing, extracting text and images, reorganizing them, saving form
data, or doing various other operations.  These flags are nothing more
than just a checklist of allowed operations.  The PDF consuming
application (evince, Adobe Reader, etc.) is supposed to honor those
restrictions and prevent you from doing operations that the author
didn't want you to do.

The PDF specification also provides a mechanism for creating encrypted
files.  When a PDF file is encrypted, all the strings and stream data
(such as page content) are encrypted with a specific encryption key.
This makes it impossible to extract data from without understanding the
PDF encryption methods.  (You couldn't open it in a text editor and dig
for recognizable strings, for example.)  The whole encryption method is
documented in the spec and is basically just RC4 for PDF version 1.4 and
earlier, which is not a particularly strong encryption method.  PDF
version 1.5 added 128-bit AESv2 with CBC, which is somewhat stronger.
Those details aren't really important though.  The point is that you
must be able to recover the encryption key to decrypt the file.

Encrypted PDF files always have both a user password and an owner
password, either or both of which may be the empty string.  The key used
to encrypt the data in the PDF is always based on the user password.
The owner password is not used at all.  In fact, the only thing the
owner password can do is to recover the user password.  In other words,
the user password is stored in the file encrypted by the owner password,
and the encryption key is stored in the file encrypted by the user
password.  That means that it is possible to entirely decrypt a PDF
file, and therefore to bypass any restrictions placed on that file, by
knowing only the user password.  PDF readers are supposed to only allow
you to bypass the restrictions if you can correctly supply the owner
password, but there's nothing inherent about the way PDF files are
structured that makes this necessary.

If the user password is set to a non-empty value, neither qpdf nor any
other application can do anything with the PDF file unless that password
is provided.  This is because the data in the PDF file is simply not
recoverable by any method short of using some kind of brute force attack
to discover the encryption key.

The catch is that you can't set restrictions on a PDF file without also
encrypting it.  This is just because of how the restrictions are stored
in the PDF file.  (The restrictions are stored with the encryption
parameters and are used in the computation of the key from the
password.)  So if an author wants to place restrictions on a file but
still allow anyone to read the file, the author assigns an empty user
password and a non-empty owner password.  PDF applications are supposed
to try the empty string to see if it works as a password, and if it
does, not to prompt for a password.  In this case, however, it is up to
the application to voluntarily honor any of the restrictions imposed on
the file.  This is pretty much unavoidable: the application must be able
to fully decrypt the file in order to display it.

None of this is a secret.  It's all spelled out in the PDF
specification.  So encrypting a PDF file without a password is just like
encrypting anything else without a password.  It may prevent a casual
user from doing something with the data, but there's no real security
there.  Encrypting a PDF file with a password provides pretty good
security, but the best security would be provided by just encrypting the
file in some other way not related to PDF encryption.

----

--Jay


-- 
To UNSUBSCRIBE, email to debian-user-REQUEST@lists.debian.org 
with a subject of "unsubscribe". Trouble? Contact listmaster@lists.debian.org
Archive: http://lists.debian.org/20100420211152.0270994370.qww314159@soup


